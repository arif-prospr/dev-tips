[
    "[1.1](#types--primitives) **Primitives**: When you access a primitive type you work directly on its value.\r\n\r\n    - `string`\r\n    - `number`\r\n    - `boolean`\r\n    - `null`\r\n    - `undefined`\r\n    - `symbol`\r\n    - `bigint`\r\n\r\n    ```javascript\r\n    const foo = 1;\r\n    let bar = foo;\r\n\r\n    bar = 9;\r\n\r\n    console.log(foo, bar); // => 1, 9\r\n    ```\r\n\r\n    - Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don’t support them natively.",
    "[1.2](#types--complex)  **Complex**: When you access a complex type you work on a reference to its value.\r\n\r\n    - `object`\r\n    - `array`\r\n    - `function`\r\n\r\n    ```javascript\r\n    const foo = [1, 2];\r\n    const bar = foo;\r\n\r\n    bar[0] = 9;\r\n\r\n    console.log(foo[0], bar[0]); // => 9, 9\r\n    ```",
    "[2.1](#references--prefer-const) Use `const` for all of your references; avoid using `var`. eslint: [`prefer-const`](https://eslint.org/docs/rules/prefer-const.html), [`no-const-assign`](https://eslint.org/docs/rules/no-const-assign.html)\r\n\r\n    > Why? This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.\r\n\r\n    ```javascript\r\n    // bad\r\n    var a = 1;\r\n    var b = 2;\r\n\r\n    // good\r\n    const a = 1;\r\n    const b = 2;\r\n    ```",
    "[2.2](#references--disallow-var) If you must reassign references, use `let` instead of `var`. eslint: [`no-var`](https://eslint.org/docs/rules/no-var.html)\r\n\r\n    > Why? `let` is block-scoped rather than function-scoped like `var`.\r\n\r\n    ```javascript\r\n    // bad\r\n    var count = 1;\r\n    if (true) {\r\n      count += 1;\r\n    }\r\n\r\n    // good, use the let.\r\n    let count = 1;\r\n    if (true) {\r\n      count += 1;\r\n    }\r\n    ```",
    "[2.3](#references--block-scope) Note that both `let` and `const` are block-scoped, whereas `var` is function-scoped.\r\n\r\n    ```javascript\r\n    // const and let only exist in the blocks they are defined in.\r\n    {\r\n      let a = 1;\r\n      const b = 1;\r\n      var c = 1;\r\n    }\r\n    console.log(a); // ReferenceError\r\n    console.log(b); // ReferenceError\r\n    console.log(c); // Prints 1\r\n    ```\r\n\r\n    In the above code, you can see that referencing `a` and `b` will produce a ReferenceError, while `c` contains the number. This is because `a` and `b` are block scoped, while `c` is scoped to the containing function.",
    "[3.1](#objects--no-new) Use the literal syntax for object creation. eslint: [`no-new-object`](https://eslint.org/docs/rules/no-new-object.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const item = new Object();\r\n\r\n    // good\r\n    const item = {};\r\n    ```",
    "[3.2](#es6-computed-properties) Use computed property names when creating objects with dynamic property names.\r\n\r\n    > Why? They allow you to define all the properties of an object in one place.\r\n\r\n    ```javascript\r\n\r\n    function getKey(k) {\r\n      return `a key named ${k}`;\r\n    }\r\n\r\n    // bad\r\n    const obj = {\r\n      id: 5,\r\n      name: 'San Francisco',\r\n    };\r\n    obj[getKey('enabled')] = true;\r\n\r\n    // good\r\n    const obj = {\r\n      id: 5,\r\n      name: 'San Francisco',\r\n      [getKey('enabled')]: true,\r\n    };\r\n    ```",
    "[3.3](#es6-object-shorthand) Use object method shorthand. eslint: [`object-shorthand`](https://eslint.org/docs/rules/object-shorthand.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const atom = {\r\n      value: 1,\r\n\r\n      addValue: function (value) {\r\n        return atom.value + value;\r\n      },\r\n    };\r\n\r\n    // good\r\n    const atom = {\r\n      value: 1,\r\n\r\n      addValue(value) {\r\n        return atom.value + value;\r\n      },\r\n    };\r\n    ```",
    "[3.4](#es6-object-concise) Use property value shorthand. eslint: [`object-shorthand`](https://eslint.org/docs/rules/object-shorthand.html)\r\n\r\n    > Why? It is shorter and descriptive.\r\n\r\n    ```javascript\r\n    const lukeSkywalker = 'Luke Skywalker';\r\n\r\n    // bad\r\n    const obj = {\r\n      lukeSkywalker: lukeSkywalker,\r\n    };\r\n\r\n    // good\r\n    const obj = {\r\n      lukeSkywalker,\r\n    };\r\n    ```",
    "[3.5](#objects--grouped-shorthand) Group your shorthand properties at the beginning of your object declaration.\r\n\r\n    > Why? It’s easier to tell which properties are using the shorthand.\r\n\r\n    ```javascript\r\n    const anakinSkywalker = 'Anakin Skywalker';\r\n    const lukeSkywalker = 'Luke Skywalker';\r\n\r\n    // bad\r\n    const obj = {\r\n      episodeOne: 1,\r\n      twoJediWalkIntoACantina: 2,\r\n      lukeSkywalker,\r\n      episodeThree: 3,\r\n      mayTheFourth: 4,\r\n      anakinSkywalker,\r\n    };\r\n\r\n    // good\r\n    const obj = {\r\n      lukeSkywalker,\r\n      anakinSkywalker,\r\n      episodeOne: 1,\r\n      twoJediWalkIntoACantina: 2,\r\n      episodeThree: 3,\r\n      mayTheFourth: 4,\r\n    };\r\n    ```",
    "[3.6](#objects--quoted-props) Only quote properties that are invalid identifiers. eslint: [`quote-props`](https://eslint.org/docs/rules/quote-props.html)\r\n\r\n    > Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.\r\n\r\n    ```javascript\r\n    // bad\r\n    const bad = {\r\n      'foo': 3,\r\n      'bar': 4,\r\n      'data-blah': 5,\r\n    };\r\n\r\n    // good\r\n    const good = {\r\n      foo: 3,\r\n      bar: 4,\r\n      'data-blah': 5,\r\n    };\r\n    ```",
    "[3.7](#objects--prototype-builtins) Do not call `Object.prototype` methods directly, such as `hasOwnProperty`, `propertyIsEnumerable`, and `isPrototypeOf`. eslint: [`no-prototype-builtins`](https://eslint.org/docs/rules/no-prototype-builtins)\r\n\r\n    > Why? These methods may be shadowed by properties on the object in question - consider `{ hasOwnProperty: false }` - or, the object may be a null object (`Object.create(null)`).\r\n\r\n    ```javascript\r\n    // bad\r\n    console.log(object.hasOwnProperty(key));\r\n\r\n    // good\r\n    console.log(Object.prototype.hasOwnProperty.call(object, key));\r\n\r\n    // best\r\n    const has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\r\n    console.log(has.call(object, key));\r\n    /* or */\r\n    import has from 'has'; // https://www.npmjs.com/package/has\r\n    console.log(has(object, key));\r\n    ```",
    "[3.8](#objects--rest-spread) Prefer the object spread syntax over [`Object.assign`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) to shallow-copy objects. Use the object rest parameter syntax to get a new object with certain properties omitted. eslint: [`prefer-object-spread`](https://eslint.org/docs/rules/prefer-object-spread)\r\n\r\n    ```javascript\r\n    // very bad\r\n    const original = { a: 1, b: 2 };\r\n    const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ\r\n    delete copy.a; // so does this\r\n\r\n    // bad\r\n    const original = { a: 1, b: 2 };\r\n    const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\r\n\r\n    // good\r\n    const original = { a: 1, b: 2 };\r\n    const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\r\n\r\n    const { a, ...noA } = copy; // noA => { b: 2, c: 3 }\r\n    ```",
    "[4.1](#arrays--literals) Use the literal syntax for array creation. eslint: [`no-array-constructor`](https://eslint.org/docs/rules/no-array-constructor.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const items = new Array();\r\n\r\n    // good\r\n    const items = [];\r\n    ```",
    "[4.2](#arrays--push) Use [Array#push](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push) instead of direct assignment to add items to an array.\r\n\r\n    ```javascript\r\n    const someStack = [];\r\n\r\n    // bad\r\n    someStack[someStack.length] = 'abracadabra';\r\n\r\n    // good\r\n    someStack.push('abracadabra');\r\n    ```",
    "[4.3](#es6-array-spreads) Use array spreads `...` to copy arrays.\r\n\r\n    ```javascript\r\n    // bad\r\n    const len = items.length;\r\n    const itemsCopy = [];\r\n    let i;\r\n\r\n    for (i = 0; i < len; i += 1) {\r\n      itemsCopy[i] = items[i];\r\n    }\r\n\r\n    // good\r\n    const itemsCopy = [...items];\r\n    ```",
    "[4.4](#arrays--from-iterable) To convert an iterable object to an array, use spreads `...` instead of [`Array.from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\r\n\r\n    ```javascript\r\n    const foo = document.querySelectorAll('.foo');\r\n\r\n    // good\r\n    const nodes = Array.from(foo);\r\n\r\n    // best\r\n    const nodes = [...foo];\r\n    ```",
    "[4.5](#arrays--from-array-like) Use [`Array.from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from) for converting an array-like object to an array.\r\n\r\n    ```javascript\r\n    const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };\r\n\r\n    // bad\r\n    const arr = Array.prototype.slice.call(arrLike);\r\n\r\n    // good\r\n    const arr = Array.from(arrLike);\r\n    ```",
    "[4.6](#arrays--mapping) Use [`Array.from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from) instead of spread `...` for mapping over iterables, because it avoids creating an intermediate array.\r\n\r\n    ```javascript\r\n    // bad\r\n    const baz = [...foo].map(bar);\r\n\r\n    // good\r\n    const baz = Array.from(foo, bar);\r\n    ```",
    "[4.7](#arrays--callback-return) Use return statements in array method callbacks. It’s ok to omit the return if the function body consists of a single statement returning an expression without side effects, following [8.2](#arrows--implicit-return). eslint: [`array-callback-return`](https://eslint.org/docs/rules/array-callback-return)\r\n\r\n    ```javascript\r\n    // good\r\n    [1, 2, 3].map((x) => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((x) => x + 1);\r\n\r\n    // bad - no returned value means `acc` becomes undefined after the first iteration\r\n    [[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {\r\n      const flatten = acc.concat(item);\r\n    });\r\n\r\n    // good\r\n    [[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {\r\n      const flatten = acc.concat(item);\r\n      return flatten;\r\n    });\r\n\r\n    // bad\r\n    inbox.filter((msg) => {\r\n      const { subject, author } = msg;\r\n      if (subject === 'Mockingbird') {\r\n        return author === 'Harper Lee';\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // good\r\n    inbox.filter((msg) => {\r\n      const { subject, author } = msg;\r\n      if (subject === 'Mockingbird') {\r\n        return author === 'Harper Lee';\r\n      }\r\n\r\n      return false;\r\n    });\r\n    ```",
    "[4.8](#arrays--bracket-newline) Use line breaks after open and before close array brackets if an array has multiple lines\r\n\r\n    ```javascript\r\n    // bad\r\n    const arr = [\r\n      [0, 1], [2, 3], [4, 5],\r\n    ];\r\n\r\n    const objectInArray = [{\r\n      id: 1,\r\n    }, {\r\n      id: 2,\r\n    }];\r\n\r\n    const numberInArray = [\r\n      1, 2,\r\n    ];\r\n\r\n    // good\r\n    const arr = [[0, 1], [2, 3], [4, 5]];\r\n\r\n    const objectInArray = [\r\n      {\r\n        id: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n      },\r\n    ];\r\n\r\n    const numberInArray = [\r\n      1,\r\n      2,\r\n    ];\r\n    ```",
    "[5.1](#destructuring--object) Use object destructuring when accessing and using multiple properties of an object. eslint: [`prefer-destructuring`](https://eslint.org/docs/rules/prefer-destructuring)\r\n\r\n    > Why? Destructuring saves you from creating temporary references for those properties, and from repetitive access of the object. Repeating object access creates more repetitive code, requires more reading, and creates more opportunities for mistakes. Destructuring objects also provides a single site of definition of the object structure that is used in the block, rather than requiring reading the entire block to determine what is used.\r\n\r\n    ```javascript\r\n    // bad\r\n    function getFullName(user) {\r\n      const firstName = user.firstName;\r\n      const lastName = user.lastName;\r\n\r\n      return `${firstName} ${lastName}`;\r\n    }\r\n\r\n    // good\r\n    function getFullName(user) {\r\n      const { firstName, lastName } = user;\r\n      return `${firstName} ${lastName}`;\r\n    }\r\n\r\n    // best\r\n    function getFullName({ firstName, lastName }) {\r\n      return `${firstName} ${lastName}`;\r\n    }\r\n    ```",
    "[5.2](#destructuring--array) Use array destructuring. eslint: [`prefer-destructuring`](https://eslint.org/docs/rules/prefer-destructuring)\r\n\r\n    ```javascript\r\n    const arr = [1, 2, 3, 4];\r\n\r\n    // bad\r\n    const first = arr[0];\r\n    const second = arr[1];\r\n\r\n    // good\r\n    const [first, second] = arr;\r\n    ```",
    "[5.3](#destructuring--object-over-array) Use object destructuring for multiple return values, not array destructuring.\r\n\r\n    > Why? You can add new properties over time or change the order of things without breaking call sites.\r\n\r\n    ```javascript\r\n    // bad\r\n    function processInput(input) {\r\n      // then a miracle occurs\r\n      return [left, right, top, bottom];\r\n    }\r\n\r\n    // the caller needs to think about the order of return data\r\n    const [left, __, top] = processInput(input);\r\n\r\n    // good\r\n    function processInput(input) {\r\n      // then a miracle occurs\r\n      return { left, right, top, bottom };\r\n    }\r\n\r\n    // the caller selects only the data they need\r\n    const { left, top } = processInput(input);\r\n    ```",
    "[6.1](#strings--quotes) Use single quotes `''` for strings. eslint: [`quotes`](https://eslint.org/docs/rules/quotes.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const name = \"Capt. Janeway\";\r\n\r\n    // bad - template literals should contain interpolation or newlines\r\n    const name = `Capt. Janeway`;\r\n\r\n    // good\r\n    const name = 'Capt. Janeway';\r\n    ```",
    "[6.2](#strings--line-length) Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.\r\n\r\n    > Why? Broken strings are painful to work with and make code less searchable.\r\n\r\n    ```javascript\r\n    // bad\r\n    const errorMessage = 'This is a super long error that was thrown because \\\r\n    of Batman. When you stop to think about how Batman had anything to do \\\r\n    with this, you would get nowhere \\\r\n    fast.';\r\n\r\n    // bad\r\n    const errorMessage = 'This is a super long error that was thrown because ' +\r\n      'of Batman. When you stop to think about how Batman had anything to do ' +\r\n      'with this, you would get nowhere fast.';\r\n\r\n    // good\r\n    const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\r\n    ```",
    "[6.3](#es6-template-literals) When programmatically building up strings, use template strings instead of concatenation. eslint: [`prefer-template`](https://eslint.org/docs/rules/prefer-template.html) [`template-curly-spacing`](https://eslint.org/docs/rules/template-curly-spacing)\r\n\r\n    > Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.\r\n\r\n    ```javascript\r\n    // bad\r\n    function sayHi(name) {\r\n      return 'How are you, ' + name + '?';\r\n    }\r\n\r\n    // bad\r\n    function sayHi(name) {\r\n      return ['How are you, ', name, '?'].join();\r\n    }\r\n\r\n    // bad\r\n    function sayHi(name) {\r\n      return `How are you, ${ name }?`;\r\n    }\r\n\r\n    // good\r\n    function sayHi(name) {\r\n      return `How are you, ${name}?`;\r\n    }\r\n    ```",
    "[6.4](#strings--eval) Never use `eval()` on a string, it opens too many vulnerabilities. eslint: [`no-eval`](https://eslint.org/docs/rules/no-eval)",
    "[6.5](#strings--escaping) Do not unnecessarily escape characters in strings. eslint: [`no-useless-escape`](https://eslint.org/docs/rules/no-useless-escape)\r\n\r\n    > Why? Backslashes harm readability, thus they should only be present when necessary.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = '\\'this\\' \\i\\s \\\"quoted\\\"';\r\n\r\n    // good\r\n    const foo = '\\'this\\' is \"quoted\"';\r\n    const foo = `my name is '${name}'`;\r\n    ```",
    "[7.1](#functions--declarations) Use named function expressions instead of function declarations. eslint: [`func-style`](https://eslint.org/docs/rules/func-style)\r\n\r\n    > Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. ([Discussion](https://github.com/airbnb/javascript/issues/794))\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {\r\n      // ...\r\n    }\r\n\r\n    // bad\r\n    const foo = function () {\r\n      // ...\r\n    };\r\n\r\n    // good\r\n    // lexical name distinguished from the variable-referenced invocation(s)\r\n    const short = function longUniqueMoreDescriptiveLexicalFoo() {\r\n      // ...\r\n    };\r\n    ```",
    "[7.2](#functions--iife) Wrap immediately invoked function expressions in parentheses. eslint: [`wrap-iife`](https://eslint.org/docs/rules/wrap-iife.html)\r\n\r\n    > Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.\r\n\r\n    ```javascript\r\n    // immediately-invoked function expression (IIFE)\r\n    (function () {\r\n      console.log('Welcome to the Internet. Please follow me.');\r\n    }());\r\n    ```",
    "[7.3](#functions--in-blocks) Never declare a function in a non-function block (`if`, `while`, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: [`no-loop-func`](https://eslint.org/docs/rules/no-loop-func.html)",
    "[7.4](#functions--note-on-blocks) **Note:** ECMA-262 defines a `block` as a list of statements. A function declaration is not a statement.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (currentUser) {\r\n      function test() {\r\n        console.log('Nope.');\r\n      }\r\n    }\r\n\r\n    // good\r\n    let test;\r\n    if (currentUser) {\r\n      test = () => {\r\n        console.log('Yup.');\r\n      };\r\n    }\r\n    ```",
    "[7.5](#functions--arguments-shadow) Never name a parameter `arguments`. This will take precedence over the `arguments` object that is given to every function scope.\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo(name, options, arguments) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function foo(name, options, args) {\r\n      // ...\r\n    }\r\n    ```",
    "[7.6](#es6-rest) Never use `arguments`, opt to use rest syntax `...` instead. eslint: [`prefer-rest-params`](https://eslint.org/docs/rules/prefer-rest-params)\r\n\r\n    > Why? `...` is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like `arguments`.\r\n\r\n    ```javascript\r\n    // bad\r\n    function concatenateAll() {\r\n      const args = Array.prototype.slice.call(arguments);\r\n      return args.join('');\r\n    }\r\n\r\n    // good\r\n    function concatenateAll(...args) {\r\n      return args.join('');\r\n    }\r\n    ```",
    "[7.7](#es6-default-parameters) Use default parameter syntax rather than mutating function arguments.\r\n\r\n    ```javascript\r\n    // really bad\r\n    function handleThings(opts) {\r\n      // No! We shouldn’t mutate function arguments.\r\n      // Double bad: if opts is falsy it'll be set to an object which may\r\n      // be what you want but it can introduce subtle bugs.\r\n      opts = opts || {};\r\n      // ...\r\n    }\r\n\r\n    // still bad\r\n    function handleThings(opts) {\r\n      if (opts === void 0) {\r\n        opts = {};\r\n      }\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function handleThings(opts = {}) {\r\n      // ...\r\n    }\r\n    ```",
    "[7.8](#functions--default-side-effects) Avoid side effects with default parameters.\r\n\r\n    > Why? They are confusing to reason about.\r\n\r\n    ```javascript\r\n    var b = 1;\r\n    // bad\r\n    function count(a = b++) {\r\n      console.log(a);\r\n    }\r\n    count();  // 1\r\n    count();  // 2\r\n    count(3); // 3\r\n    count();  // 3\r\n    ```",
    "[7.9](#functions--defaults-last) Always put default parameters last. eslint: [`default-param-last`](https://eslint.org/docs/rules/default-param-last)\r\n\r\n    ```javascript\r\n    // bad\r\n    function handleThings(opts = {}, name) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function handleThings(name, opts = {}) {\r\n      // ...\r\n    }\r\n    ```",
    "[7.10](#functions--constructor) Never use the Function constructor to create a new function. eslint: [`no-new-func`](https://eslint.org/docs/rules/no-new-func)\r\n\r\n    > Why? Creating a function in this way evaluates a string similarly to `eval()`, which opens vulnerabilities.\r\n\r\n    ```javascript\r\n    // bad\r\n    var add = new Function('a', 'b', 'return a + b');\r\n\r\n    // still bad\r\n    var subtract = Function('a', 'b', 'return a - b');\r\n    ```",
    "[7.11](#functions--signature-spacing) Spacing in a function signature. eslint: [`space-before-function-paren`](https://eslint.org/docs/rules/space-before-function-paren) [`space-before-blocks`](https://eslint.org/docs/rules/space-before-blocks)\r\n\r\n    > Why? Consistency is good, and you shouldn’t have to add or remove a space when adding or removing a name.\r\n\r\n    ```javascript\r\n    // bad\r\n    const f = function(){};\r\n    const g = function (){};\r\n    const h = function() {};\r\n\r\n    // good\r\n    const x = function () {};\r\n    const y = function a() {};\r\n    ```",
    "[7.12](#functions--mutate-params) Never mutate parameters. eslint: [`no-param-reassign`](https://eslint.org/docs/rules/no-param-reassign.html)\r\n\r\n    > Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.\r\n\r\n    ```javascript\r\n    // bad\r\n    function f1(obj) {\r\n      obj.key = 1;\r\n    }\r\n\r\n    // good\r\n    function f2(obj) {\r\n      const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\r\n    }\r\n    ```",
    "[7.13](#functions--reassign-params) Never reassign parameters. eslint: [`no-param-reassign`](https://eslint.org/docs/rules/no-param-reassign.html)\r\n\r\n    > Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the `arguments` object. It can also cause optimization issues, especially in V8.\r\n\r\n    ```javascript\r\n    // bad\r\n    function f1(a) {\r\n      a = 1;\r\n      // ...\r\n    }\r\n\r\n    function f2(a) {\r\n      if (!a) { a = 1; }\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function f3(a) {\r\n      const b = a || 1;\r\n      // ...\r\n    }\r\n\r\n    function f4(a = 1) {\r\n      // ...\r\n    }\r\n    ```",
    "[7.14](#functions--spread-vs-apply) Prefer the use of the spread syntax `...` to call variadic functions. eslint: [`prefer-spread`](https://eslint.org/docs/rules/prefer-spread)\r\n\r\n    > Why? It’s cleaner, you don’t need to supply a context, and you can not easily compose `new` with `apply`.\r\n\r\n    ```javascript\r\n    // bad\r\n    const x = [1, 2, 3, 4, 5];\r\n    console.log.apply(console, x);\r\n\r\n    // good\r\n    const x = [1, 2, 3, 4, 5];\r\n    console.log(...x);\r\n\r\n    // bad\r\n    new (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]));\r\n\r\n    // good\r\n    new Date(...[2016, 8, 5]);\r\n    ```",
    "[7.15](#functions--signature-invocation-indentation) Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item. eslint: [`function-paren-newline`](https://eslint.org/docs/rules/function-paren-newline)\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo(bar,\r\n                 baz,\r\n                 quux) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function foo(\r\n      bar,\r\n      baz,\r\n      quux,\r\n    ) {\r\n      // ...\r\n    }\r\n\r\n    // bad\r\n    console.log(foo,\r\n      bar,\r\n      baz);\r\n\r\n    // good\r\n    console.log(\r\n      foo,\r\n      bar,\r\n      baz,\r\n    );\r\n    ```",
    "[8.1](#arrows--use-them) When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: [`prefer-arrow-callback`](https://eslint.org/docs/rules/prefer-arrow-callback.html), [`arrow-spacing`](https://eslint.org/docs/rules/arrow-spacing.html)\r\n\r\n    > Why? It creates a version of the function that executes in the context of `this`, which is usually what you want, and is a more concise syntax.\r\n\r\n    > Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.\r\n\r\n    ```javascript\r\n    // bad\r\n    [1, 2, 3].map(function (x) {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((x) => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n    ```",
    "[8.2](#arrows--implicit-return) If the function body consists of a single statement returning an [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions) without side effects, omit the braces and use the implicit return. Otherwise, keep the braces and use a `return` statement. eslint: [`arrow-parens`](https://eslint.org/docs/rules/arrow-parens.html), [`arrow-body-style`](https://eslint.org/docs/rules/arrow-body-style.html)\r\n\r\n    > Why? Syntactic sugar. It reads well when multiple functions are chained together.\r\n\r\n    ```javascript\r\n    // bad\r\n    [1, 2, 3].map((number) => {\r\n      const nextNumber = number + 1;\r\n      `A string containing the ${nextNumber}.`;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((number) => `A string containing the ${number + 1}.`);\r\n\r\n    // good\r\n    [1, 2, 3].map((number) => {\r\n      const nextNumber = number + 1;\r\n      return `A string containing the ${nextNumber}.`;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((number, index) => ({\r\n      [index]: number,\r\n    }));\r\n\r\n    // No implicit return with side effects\r\n    function foo(callback) {\r\n      const val = callback();\r\n      if (val === true) {\r\n        // Do something if callback returns true\r\n      }\r\n    }\r\n\r\n    let bool = false;\r\n\r\n    // bad\r\n    foo(() => bool = true);\r\n\r\n    // good\r\n    foo(() => {\r\n      bool = true;\r\n    });\r\n    ```",
    "[8.3](#arrows--paren-wrap) In case the expression spans over multiple lines, wrap it in parentheses for better readability.\r\n\r\n    > Why? It shows clearly where the function starts and ends.\r\n\r\n    ```javascript\r\n    // bad\r\n    ['get', 'post', 'put'].map((httpMethod) => Object.prototype.hasOwnProperty.call(\r\n        httpMagicObjectWithAVeryLongName,\r\n        httpMethod,\r\n      )\r\n    );\r\n\r\n    // good\r\n    ['get', 'post', 'put'].map((httpMethod) => (\r\n      Object.prototype.hasOwnProperty.call(\r\n        httpMagicObjectWithAVeryLongName,\r\n        httpMethod,\r\n      )\r\n    ));\r\n    ```",
    "[8.4](#arrows--one-arg-parens) Always include parentheses around arguments for clarity and consistency. eslint: [`arrow-parens`](https://eslint.org/docs/rules/arrow-parens.html)\r\n\r\n    > Why? Minimizes diff churn when adding or removing arguments.\r\n\r\n    ```javascript\r\n    // bad\r\n    [1, 2, 3].map(x => x * x);\r\n\r\n    // good\r\n    [1, 2, 3].map((x) => x * x);\r\n\r\n    // bad\r\n    [1, 2, 3].map(number => (\r\n      `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`\r\n    ));\r\n\r\n    // good\r\n    [1, 2, 3].map((number) => (\r\n      `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`\r\n    ));\r\n\r\n    // bad\r\n    [1, 2, 3].map(x => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((x) => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n    ```",
    "[8.5](#arrows--confusing) Avoid confusing arrow function syntax (`=>`) with comparison operators (`<=`, `>=`). eslint: [`no-confusing-arrow`](https://eslint.org/docs/rules/no-confusing-arrow)\r\n\r\n    ```javascript\r\n    // bad\r\n    const itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\r\n\r\n    // bad\r\n    const itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\r\n\r\n    // good\r\n    const itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\r\n\r\n    // good\r\n    const itemHeight = (item) => {\r\n      const { height, largeSize, smallSize } = item;\r\n      return height <= 256 ? largeSize : smallSize;\r\n    };\r\n    ```",
    "[8.6](#whitespace--implicit-arrow-linebreak) Enforce the location of arrow function bodies with implicit returns. eslint: [`implicit-arrow-linebreak`](https://eslint.org/docs/rules/implicit-arrow-linebreak)\r\n\r\n    ```javascript\r\n    // bad\r\n    (foo) =>\r\n      bar;\r\n\r\n    (foo) =>\r\n      (bar);\r\n\r\n    // good\r\n    (foo) => bar;\r\n    (foo) => (bar);\r\n    (foo) => (\r\n       bar\r\n    )\r\n    ```",
    "[9.1](#constructors--use-class) Always use `class`. Avoid manipulating `prototype` directly.\r\n\r\n    > Why? `class` syntax is more concise and easier to reason about.\r\n\r\n    ```javascript\r\n    // bad\r\n    function Queue(contents = []) {\r\n      this.queue = [...contents];\r\n    }\r\n    Queue.prototype.pop = function () {\r\n      const value = this.queue[0];\r\n      this.queue.splice(0, 1);\r\n      return value;\r\n    };\r\n\r\n    // good\r\n    class Queue {\r\n      constructor(contents = []) {\r\n        this.queue = [...contents];\r\n      }\r\n      pop() {\r\n        const value = this.queue[0];\r\n        this.queue.splice(0, 1);\r\n        return value;\r\n      }\r\n    }\r\n    ```",
    "[9.2](#constructors--extends) Use `extends` for inheritance.\r\n\r\n    > Why? It is a built-in way to inherit prototype functionality without breaking `instanceof`.\r\n\r\n    ```javascript\r\n    // bad\r\n    const inherits = require('inherits');\r\n    function PeekableQueue(contents) {\r\n      Queue.apply(this, contents);\r\n    }\r\n    inherits(PeekableQueue, Queue);\r\n    PeekableQueue.prototype.peek = function () {\r\n      return this.queue[0];\r\n    };\r\n\r\n    // good\r\n    class PeekableQueue extends Queue {\r\n      peek() {\r\n        return this.queue[0];\r\n      }\r\n    }\r\n    ```",
    "[9.3](#constructors--chaining) Methods can return `this` to help with method chaining.\r\n\r\n    ```javascript\r\n    // bad\r\n    Jedi.prototype.jump = function () {\r\n      this.jumping = true;\r\n      return true;\r\n    };\r\n\r\n    Jedi.prototype.setHeight = function (height) {\r\n      this.height = height;\r\n    };\r\n\r\n    const luke = new Jedi();\r\n    luke.jump(); // => true\r\n    luke.setHeight(20); // => undefined\r\n\r\n    // good\r\n    class Jedi {\r\n      jump() {\r\n        this.jumping = true;\r\n        return this;\r\n      }\r\n\r\n      setHeight(height) {\r\n        this.height = height;\r\n        return this;\r\n      }\r\n    }\r\n\r\n    const luke = new Jedi();\r\n\r\n    luke.jump()\r\n      .setHeight(20);\r\n    ```",
    "[9.4](#constructors--tostring) It’s okay to write a custom `toString()` method, just make sure it works successfully and causes no side effects.\r\n\r\n    ```javascript\r\n    class Jedi {\r\n      constructor(options = {}) {\r\n        this.name = options.name || 'no name';\r\n      }\r\n\r\n      getName() {\r\n        return this.name;\r\n      }\r\n\r\n      toString() {\r\n        return `Jedi - ${this.getName()}`;\r\n      }\r\n    }\r\n    ```",
    "[9.5](#constructors--no-useless) Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: [`no-useless-constructor`](https://eslint.org/docs/rules/no-useless-constructor)\r\n\r\n    ```javascript\r\n    // bad\r\n    class Jedi {\r\n      constructor() {}\r\n\r\n      getName() {\r\n        return this.name;\r\n      }\r\n    }\r\n\r\n    // bad\r\n    class Rey extends Jedi {\r\n      constructor(...args) {\r\n        super(...args);\r\n      }\r\n    }\r\n\r\n    // good\r\n    class Rey extends Jedi {\r\n      constructor(...args) {\r\n        super(...args);\r\n        this.name = 'Rey';\r\n      }\r\n    }\r\n    ```",
    "[9.6](#classes--no-duplicate-members) Avoid duplicate class members. eslint: [`no-dupe-class-members`](https://eslint.org/docs/rules/no-dupe-class-members)\r\n\r\n    > Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.\r\n\r\n    ```javascript\r\n    // bad\r\n    class Foo {\r\n      bar() { return 1; }\r\n      bar() { return 2; }\r\n    }\r\n\r\n    // good\r\n    class Foo {\r\n      bar() { return 1; }\r\n    }\r\n\r\n    // good\r\n    class Foo {\r\n      bar() { return 2; }\r\n    }\r\n    ```",
    "[9.7](#classes--methods-use-this) Class methods should use `this` or be made into a static method unless an external library or framework requires using specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: [`class-methods-use-this`](https://eslint.org/docs/rules/class-methods-use-this)\r\n\r\n    ```javascript\r\n    // bad\r\n    class Foo {\r\n      bar() {\r\n        console.log('bar');\r\n      }\r\n    }\r\n\r\n    // good - this is used\r\n    class Foo {\r\n      bar() {\r\n        console.log(this.bar);\r\n      }\r\n    }\r\n\r\n    // good - constructor is exempt\r\n    class Foo {\r\n      constructor() {\r\n        // ...\r\n      }\r\n    }\r\n\r\n    // good - static methods aren't expected to use this\r\n    class Foo {\r\n      static bar() {\r\n        console.log('bar');\r\n      }\r\n    }\r\n    ```",
    "[10.1](#modules--use-them) Always use modules (`import`/`export`) over a non-standard module system. You can always transpile to your preferred module system.\r\n\r\n    > Why? Modules are the future, let’s start using the future now.\r\n\r\n    ```javascript\r\n    // bad\r\n    const AirbnbStyleGuide = require('./AirbnbStyleGuide');\r\n    module.exports = AirbnbStyleGuide.es6;\r\n\r\n    // ok\r\n    import AirbnbStyleGuide from './AirbnbStyleGuide';\r\n    export default AirbnbStyleGuide.es6;\r\n\r\n    // best\r\n    import { es6 } from './AirbnbStyleGuide';\r\n    export default es6;\r\n    ```",
    "[10.2](#modules--no-wildcard) Do not use wildcard imports.\r\n\r\n    > Why? This makes sure you have a single default export.\r\n\r\n    ```javascript\r\n    // bad\r\n    import * as AirbnbStyleGuide from './AirbnbStyleGuide';\r\n\r\n    // good\r\n    import AirbnbStyleGuide from './AirbnbStyleGuide';\r\n    ```",
    "[10.3](#modules--no-export-from-import) And do not export directly from an import.\r\n\r\n    > Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.\r\n\r\n    ```javascript\r\n    // bad\r\n    // filename es6.js\r\n    export { es6 as default } from './AirbnbStyleGuide';\r\n\r\n    // good\r\n    // filename es6.js\r\n    import { es6 } from './AirbnbStyleGuide';\r\n    export default es6;\r\n    ```",
    "[10.4](#modules--no-duplicate-imports) Only import from a path in one place.\r\n eslint: [`no-duplicate-imports`](https://eslint.org/docs/rules/no-duplicate-imports)\r\n    > Why? Having multiple lines that import from the same path can make code harder to maintain.\r\n\r\n    ```javascript\r\n    // bad\r\n    import foo from 'foo';\r\n    // … some other imports … //\r\n    import { named1, named2 } from 'foo';\r\n\r\n    // good\r\n    import foo, { named1, named2 } from 'foo';\r\n\r\n    // good\r\n    import foo, {\r\n      named1,\r\n      named2,\r\n    } from 'foo';\r\n    ```",
    "[10.5](#modules--no-mutable-exports) Do not export mutable bindings.\r\n eslint: [`import/no-mutable-exports`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md)\r\n    > Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.\r\n\r\n    ```javascript\r\n    // bad\r\n    let foo = 3;\r\n    export { foo };\r\n\r\n    // good\r\n    const foo = 3;\r\n    export { foo };\r\n    ```",
    "[10.6](#modules--prefer-default-export) In modules with a single export, prefer default export over named export.\r\n eslint: [`import/prefer-default-export`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md)\r\n    > Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.\r\n\r\n    ```javascript\r\n    // bad\r\n    export function foo() {}\r\n\r\n    // good\r\n    export default function foo() {}\r\n    ```",
    "[10.7](#modules--imports-first) Put all `import`s above non-import statements.\r\n eslint: [`import/first`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md)\r\n    > Why? Since `import`s are hoisted, keeping them all at the top prevents surprising behavior.\r\n\r\n    ```javascript\r\n    // bad\r\n    import foo from 'foo';\r\n    foo.init();\r\n\r\n    import bar from 'bar';\r\n\r\n    // good\r\n    import foo from 'foo';\r\n    import bar from 'bar';\r\n\r\n    foo.init();\r\n    ```",
    "[10.8](#modules--multiline-imports-over-newlines) Multiline imports should be indented just like multiline array and object literals.\r\n eslint: [`object-curly-newline`](https://eslint.org/docs/rules/object-curly-newline)\r\n\r\n    > Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.\r\n\r\n    ```javascript\r\n    // bad\r\n    import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\r\n\r\n    // good\r\n    import {\r\n      longNameA,\r\n      longNameB,\r\n      longNameC,\r\n      longNameD,\r\n      longNameE,\r\n    } from 'path';\r\n    ```",
    "[10.9](#modules--no-webpack-loader-syntax) Disallow Webpack loader syntax in module import statements.\r\n eslint: [`import/no-webpack-loader-syntax`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md)\r\n    > Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in `webpack.config.js`.\r\n\r\n    ```javascript\r\n    // bad\r\n    import fooSass from 'css!sass!foo.scss';\r\n    import barCss from 'style!css!bar.css';\r\n\r\n    // good\r\n    import fooSass from 'foo.scss';\r\n    import barCss from 'bar.css';\r\n    ```",
    "[10.10](#modules--import-extensions) Do not include JavaScript filename extensions\r\n eslint: [`import/extensions`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md)\r\n    > Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer.\r\n\r\n    ```javascript\r\n    // bad\r\n    import foo from './foo.js';\r\n    import bar from './bar.jsx';\r\n    import baz from './baz/index.jsx';\r\n\r\n    // good\r\n    import foo from './foo';\r\n    import bar from './bar';\r\n    import baz from './baz';\r\n    ```",
    "[11.1](#iterators--nope) Don’t use iterators. Prefer JavaScript’s higher-order functions instead of loops like `for-in` or `for-of`. eslint: [`no-iterator`](https://eslint.org/docs/rules/no-iterator.html) [`no-restricted-syntax`](https://eslint.org/docs/rules/no-restricted-syntax)\r\n\r\n    > Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.\r\n\r\n    > Use `map()` / `every()` / `filter()` / `find()` / `findIndex()` / `reduce()` / `some()` / ... to iterate over arrays, and `Object.keys()` / `Object.values()` / `Object.entries()` to produce arrays so you can iterate over objects.\r\n\r\n    ```javascript\r\n    const numbers = [1, 2, 3, 4, 5];\r\n\r\n    // bad\r\n    let sum = 0;\r\n    for (let num of numbers) {\r\n      sum += num;\r\n    }\r\n    sum === 15;\r\n\r\n    // good\r\n    let sum = 0;\r\n    numbers.forEach((num) => {\r\n      sum += num;\r\n    });\r\n    sum === 15;\r\n\r\n    // best (use the functional force)\r\n    const sum = numbers.reduce((total, num) => total + num, 0);\r\n    sum === 15;\r\n\r\n    // bad\r\n    const increasedByOne = [];\r\n    for (let i = 0; i < numbers.length; i++) {\r\n      increasedByOne.push(numbers[i] + 1);\r\n    }\r\n\r\n    // good\r\n    const increasedByOne = [];\r\n    numbers.forEach((num) => {\r\n      increasedByOne.push(num + 1);\r\n    });\r\n\r\n    // best (keeping it functional)\r\n    const increasedByOne = numbers.map((num) => num + 1);\r\n    ```",
    "[11.2](#generators--nope) Don’t use generators for now.\r\n\r\n    > Why? They don’t transpile well to ES5.",
    "[11.3](#generators--spacing) If you must use generators, or if you disregard [our advice](#generators--nope), make sure their function signature is spaced properly. eslint: [`generator-star-spacing`](https://eslint.org/docs/rules/generator-star-spacing)\r\n\r\n    > Why? `function` and `*` are part of the same conceptual keyword - `*` is not a modifier for `function`, `function*` is a unique construct, different from `function`.\r\n\r\n    ```javascript\r\n    // bad\r\n    function * foo() {\r\n      // ...\r\n    }\r\n\r\n    // bad\r\n    const bar = function * () {\r\n      // ...\r\n    };\r\n\r\n    // bad\r\n    const baz = function *() {\r\n      // ...\r\n    };\r\n\r\n    // bad\r\n    const quux = function*() {\r\n      // ...\r\n    };\r\n\r\n    // bad\r\n    function*foo() {\r\n      // ...\r\n    }\r\n\r\n    // bad\r\n    function *foo() {\r\n      // ...\r\n    }\r\n\r\n    // very bad\r\n    function\r\n    *\r\n    foo() {\r\n      // ...\r\n    }\r\n\r\n    // very bad\r\n    const wat = function\r\n    *\r\n    () {\r\n      // ...\r\n    };\r\n\r\n    // good\r\n    function* foo() {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    const foo = function* () {\r\n      // ...\r\n    };\r\n    ```",
    "[12.1](#properties--dot) Use dot notation when accessing properties. eslint: [`dot-notation`](https://eslint.org/docs/rules/dot-notation.html)\r\n\r\n    ```javascript\r\n    const luke = {\r\n      jedi: true,\r\n      age: 28,\r\n    };\r\n\r\n    // bad\r\n    const isJedi = luke['jedi'];\r\n\r\n    // good\r\n    const isJedi = luke.jedi;\r\n    ```",
    "[12.2](#properties--bracket) Use bracket notation `[]` when accessing properties with a variable.\r\n\r\n    ```javascript\r\n    const luke = {\r\n      jedi: true,\r\n      age: 28,\r\n    };\r\n\r\n    function getProp(prop) {\r\n      return luke[prop];\r\n    }\r\n\r\n    const isJedi = getProp('jedi');\r\n    ```",
    "[12.3](#es2016-properties--exponentiation-operator) Use exponentiation operator `**` when calculating exponentiations. eslint: [`no-restricted-properties`](https://eslint.org/docs/rules/no-restricted-properties).\r\n\r\n    ```javascript\r\n    // bad\r\n    const binary = Math.pow(2, 10);\r\n\r\n    // good\r\n    const binary = 2 ** 10;\r\n    ```",
    "[13.1](#variables--const) Always use `const` or `let` to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: [`no-undef`](https://eslint.org/docs/rules/no-undef) [`prefer-const`](https://eslint.org/docs/rules/prefer-const)\r\n\r\n    ```javascript\r\n    // bad\r\n    superPower = new SuperPower();\r\n\r\n    // good\r\n    const superPower = new SuperPower();\r\n    ```",
    "[13.2](#variables--one-const) Use one `const` or `let` declaration per variable or assignment. eslint: [`one-var`](https://eslint.org/docs/rules/one-var.html)\r\n\r\n    > Why? It’s easier to add new variable declarations this way, and you never have to worry about swapping out a `;` for a `,` or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.\r\n\r\n    ```javascript\r\n    // bad\r\n    const items = getItems(),\r\n        goSportsTeam = true,\r\n        dragonball = 'z';\r\n\r\n    // bad\r\n    // (compare to above, and try to spot the mistake)\r\n    const items = getItems(),\r\n        goSportsTeam = true;\r\n        dragonball = 'z';\r\n\r\n    // good\r\n    const items = getItems();\r\n    const goSportsTeam = true;\r\n    const dragonball = 'z';\r\n    ```",
    "[13.3](#variables--const-let-group) Group all your `const`s and then group all your `let`s.\r\n\r\n    > Why? This is helpful when later on you might need to assign a variable depending on one of the previously assigned variables.\r\n\r\n    ```javascript\r\n    // bad\r\n    let i, len, dragonball,\r\n        items = getItems(),\r\n        goSportsTeam = true;\r\n\r\n    // bad\r\n    let i;\r\n    const items = getItems();\r\n    let dragonball;\r\n    const goSportsTeam = true;\r\n    let len;\r\n\r\n    // good\r\n    const goSportsTeam = true;\r\n    const items = getItems();\r\n    let dragonball;\r\n    let i;\r\n    let length;\r\n    ```",
    "[13.4](#variables--define-where-used) Assign variables where you need them, but place them in a reasonable place.\r\n\r\n    > Why? `let` and `const` are block scoped and not function scoped.\r\n\r\n    ```javascript\r\n    // bad - unnecessary function call\r\n    function checkName(hasName) {\r\n      const name = getName();\r\n\r\n      if (hasName === 'test') {\r\n        return false;\r\n      }\r\n\r\n      if (name === 'test') {\r\n        this.setName('');\r\n        return false;\r\n      }\r\n\r\n      return name;\r\n    }\r\n\r\n    // good\r\n    function checkName(hasName) {\r\n      if (hasName === 'test') {\r\n        return false;\r\n      }\r\n\r\n      const name = getName();\r\n\r\n      if (name === 'test') {\r\n        this.setName('');\r\n        return false;\r\n      }\r\n\r\n      return name;\r\n    }\r\n    ```",
    "[13.5](#variables--no-chain-assignment) Don’t chain variable assignments. eslint: [`no-multi-assign`](https://eslint.org/docs/rules/no-multi-assign)\r\n\r\n    > Why? Chaining variable assignments creates implicit global variables.\r\n\r\n    ```javascript\r\n    // bad\r\n    (function example() {\r\n      // JavaScript interprets this as\r\n      // let a = ( b = ( c = 1 ) );\r\n      // The let keyword only applies to variable a; variables b and c become\r\n      // global variables.\r\n      let a = b = c = 1;\r\n    }());\r\n\r\n    console.log(a); // throws ReferenceError\r\n    console.log(b); // 1\r\n    console.log(c); // 1\r\n\r\n    // good\r\n    (function example() {\r\n      let a = 1;\r\n      let b = a;\r\n      let c = a;\r\n    }());\r\n\r\n    console.log(a); // throws ReferenceError\r\n    console.log(b); // throws ReferenceError\r\n    console.log(c); // throws ReferenceError\r\n\r\n    // the same applies for `const`\r\n    ```",
    "[13.6](#variables--unary-increment-decrement) Avoid using unary increments and decrements (`++`, `--`). eslint [`no-plusplus`](https://eslint.org/docs/rules/no-plusplus)\r\n\r\n    > Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like `num += 1` instead of `num++` or `num ++`. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.\r\n\r\n    ```javascript\r\n    // bad\r\n\r\n    const array = [1, 2, 3];\r\n    let num = 1;\r\n    num++;\r\n    --num;\r\n\r\n    let sum = 0;\r\n    let truthyCount = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      let value = array[i];\r\n      sum += value;\r\n      if (value) {\r\n        truthyCount++;\r\n      }\r\n    }\r\n\r\n    // good\r\n\r\n    const array = [1, 2, 3];\r\n    let num = 1;\r\n    num += 1;\r\n    num -= 1;\r\n\r\n    const sum = array.reduce((a, b) => a + b, 0);\r\n    const truthyCount = array.filter(Boolean).length;\r\n    ```",
    "[13.7](#variables--linebreak) Avoid linebreaks before or after `=` in an assignment. If your assignment violates [`max-len`](https://eslint.org/docs/rules/max-len.html), surround the value in parens. eslint [`operator-linebreak`](https://eslint.org/docs/rules/operator-linebreak.html).\r\n\r\n    > Why? Linebreaks surrounding `=` can obfuscate the value of an assignment.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo =\r\n      superLongLongLongLongLongLongLongLongFunctionName();\r\n\r\n    // bad\r\n    const foo\r\n      = 'superLongLongLongLongLongLongLongLongString';\r\n\r\n    // good\r\n    const foo = (\r\n      superLongLongLongLongLongLongLongLongFunctionName()\r\n    );\r\n\r\n    // good\r\n    const foo = 'superLongLongLongLongLongLongLongLongString';\r\n    ```",
    "[13.8](#variables--no-unused-vars) Disallow unused variables. eslint: [`no-unused-vars`](https://eslint.org/docs/rules/no-unused-vars)\r\n\r\n    > Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\r\n\r\n    ```javascript\r\n    // bad\r\n\r\n    var some_unused_var = 42;\r\n\r\n    // Write-only variables are not considered as used.\r\n    var y = 10;\r\n    y = 5;\r\n\r\n    // A read for a modification of itself is not considered as used.\r\n    var z = 0;\r\n    z = z + 1;\r\n\r\n    // Unused function arguments.\r\n    function getX(x, y) {\r\n        return x;\r\n    }\r\n\r\n    // good\r\n\r\n    function getXPlusY(x, y) {\r\n      return x + y;\r\n    }\r\n\r\n    var x = 1;\r\n    var y = a + 2;\r\n\r\n    alert(getXPlusY(x, y));\r\n\r\n    // 'type' is ignored even if unused because it has a rest property sibling.\r\n    // This is a form of extracting an object that omits the specified keys.\r\n    var { type, ...coords } = data;\r\n    // 'coords' is now the 'data' object without its 'type' property.\r\n    ```",
    "[14.1](#hoisting--about) `var` declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. `const` and `let` declarations are blessed with a new concept called [Temporal Dead Zones (TDZ)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz). It’s important to know why [typeof is no longer safe](https://web.archive.org/web/20200121061528/http://es-discourse.com/t/why-typeof-is-no-longer-safe/15).\r\n\r\n    ```javascript\r\n    // we know this wouldn’t work (assuming there\r\n    // is no notDefined global variable)\r\n    function example() {\r\n      console.log(notDefined); // => throws a ReferenceError\r\n    }\r\n\r\n    // creating a variable declaration after you\r\n    // reference the variable will work due to\r\n    // variable hoisting. Note: the assignment\r\n    // value of `true` is not hoisted.\r\n    function example() {\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      var declaredButNotAssigned = true;\r\n    }\r\n\r\n    // the interpreter is hoisting the variable\r\n    // declaration to the top of the scope,\r\n    // which means our example could be rewritten as:\r\n    function example() {\r\n      let declaredButNotAssigned;\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      declaredButNotAssigned = true;\r\n    }\r\n\r\n    // using const and let\r\n    function example() {\r\n      console.log(declaredButNotAssigned); // => throws a ReferenceError\r\n      console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\r\n      const declaredButNotAssigned = true;\r\n    }\r\n    ```",
    "[14.2](#hoisting--anon-expressions) Anonymous function expressions hoist their variable name, but not the function assignment.\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(anonymous); // => undefined\r\n\r\n      anonymous(); // => TypeError anonymous is not a function\r\n\r\n      var anonymous = function () {\r\n        console.log('anonymous function expression');\r\n      };\r\n    }\r\n    ```",
    "[14.3](#hoisting--named-expressions) Named function expressions hoist the variable name, not the function name or the function body.\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      superPower(); // => ReferenceError superPower is not defined\r\n\r\n      var named = function superPower() {\r\n        console.log('Flying');\r\n      };\r\n    }\r\n\r\n    // the same is true when the function name\r\n    // is the same as the variable name.\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      var named = function named() {\r\n        console.log('named');\r\n      };\r\n    }\r\n    ```",
    "[14.4](#hoisting--declarations) Function declarations hoist their name and the function body.\r\n\r\n    ```javascript\r\n    function example() {\r\n      superPower(); // => Flying\r\n\r\n      function superPower() {\r\n        console.log('Flying');\r\n      }\r\n    }\r\n    ```",
    "For more information refer to [JavaScript Scoping & Hoisting](https://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/) by [Ben Cherry](https://www.adequatelygood.com/).",
    "[15.1](#comparison--eqeqeq) Use `===` and `!==` over `==` and `!=`. eslint: [`eqeqeq`](https://eslint.org/docs/rules/eqeqeq.html)",
    "[15.2](#comparison--if) Conditional statements such as the `if` statement evaluate their expression using coercion with the `ToBoolean` abstract method and always follow these simple rules:\r\n\r\n    - **Objects** evaluate to **true**\r\n    - **Undefined** evaluates to **false**\r\n    - **Null** evaluates to **false**\r\n    - **Booleans** evaluate to **the value of the boolean**\r\n    - **Numbers** evaluate to **false** if **+0, -0, or NaN**, otherwise **true**\r\n    - **Strings** evaluate to **false** if an empty string `''`, otherwise **true**\r\n\r\n    ```javascript\r\n    if ([0] && []) {\r\n      // true\r\n      // an array (even an empty one) is an object, objects will evaluate to true\r\n    }\r\n    ```",
    "[15.3](#comparison--shortcuts) Use shortcuts for booleans, but explicit comparisons for strings and numbers.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (isValid === true) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    if (isValid) {\r\n      // ...\r\n    }\r\n\r\n    // bad\r\n    if (name) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    if (name !== '') {\r\n      // ...\r\n    }\r\n\r\n    // bad\r\n    if (collection.length) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    if (collection.length > 0) {\r\n      // ...\r\n    }\r\n    ```",
    "[15.4](#comparison--moreinfo) For more information see [Truth Equality and JavaScript](https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108) by Angus Croll.",
    "[15.5](#comparison--switch-blocks) Use braces to create blocks in `case` and `default` clauses that contain lexical declarations (e.g. `let`, `const`, `function`, and `class`). eslint: [`no-case-declarations`](https://eslint.org/docs/rules/no-case-declarations.html)\r\n\r\n    > Why? Lexical declarations are visible in the entire `switch` block but only get initialized when assigned, which only happens when its `case` is reached. This causes problems when multiple `case` clauses attempt to define the same thing.\r\n\r\n    ```javascript\r\n    // bad\r\n    switch (foo) {\r\n      case 1:\r\n        let x = 1;\r\n        break;\r\n      case 2:\r\n        const y = 2;\r\n        break;\r\n      case 3:\r\n        function f() {\r\n          // ...\r\n        }\r\n        break;\r\n      default:\r\n        class C {}\r\n    }\r\n\r\n    // good\r\n    switch (foo) {\r\n      case 1: {\r\n        let x = 1;\r\n        break;\r\n      }\r\n      case 2: {\r\n        const y = 2;\r\n        break;\r\n      }\r\n      case 3: {\r\n        function f() {\r\n          // ...\r\n        }\r\n        break;\r\n      }\r\n      case 4:\r\n        bar();\r\n        break;\r\n      default: {\r\n        class C {}\r\n      }\r\n    }\r\n    ```",
    "[15.6](#comparison--nested-ternaries) Ternaries should not be nested and generally be single line expressions. eslint: [`no-nested-ternary`](https://eslint.org/docs/rules/no-nested-ternary.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = maybe1 > maybe2\r\n      ? \"bar\"\r\n      : value1 > value2 ? \"baz\" : null;\r\n\r\n    // split into 2 separated ternary expressions\r\n    const maybeNull = value1 > value2 ? 'baz' : null;\r\n\r\n    // better\r\n    const foo = maybe1 > maybe2\r\n      ? 'bar'\r\n      : maybeNull;\r\n\r\n    // best\r\n    const foo = maybe1 > maybe2 ? 'bar' : maybeNull;\r\n    ```",
    "[15.7](#comparison--unneeded-ternary) Avoid unneeded ternary statements. eslint: [`no-unneeded-ternary`](https://eslint.org/docs/rules/no-unneeded-ternary.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = a ? a : b;\r\n    const bar = c ? true : false;\r\n    const baz = c ? false : true;\r\n\r\n    // good\r\n    const foo = a || b;\r\n    const bar = !!c;\r\n    const baz = !c;\r\n    ```",
    "[15.8](#comparison--no-mixed-operators) When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: `+`, `-`, and `**` since their precedence is broadly understood. We recommend enclosing `/` and `*` in parentheses because their precedence can be ambiguous when they are mixed.\r\n  eslint: [`no-mixed-operators`](https://eslint.org/docs/rules/no-mixed-operators.html)\r\n\r\n    > Why? This improves readability and clarifies the developer’s intention.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = a && b < 0 || c > 0 || d + 1 === 0;\r\n\r\n    // bad\r\n    const bar = a ** b - 5 % d;\r\n\r\n    // bad\r\n    // one may be confused into thinking (a || b) && c\r\n    if (a || b && c) {\r\n      return d;\r\n    }\r\n\r\n    // bad\r\n    const bar = a + b / c * d;\r\n\r\n    // good\r\n    const foo = (a && b < 0) || c > 0 || (d + 1 === 0);\r\n\r\n    // good\r\n    const bar = a ** b - (5 % d);\r\n\r\n    // good\r\n    if (a || (b && c)) {\r\n      return d;\r\n    }\r\n\r\n    // good\r\n    const bar = a + (b / c) * d;\r\n    ```",
    "[16.1](#blocks--braces) Use braces with all multiline blocks. eslint: [`nonblock-statement-body-position`](https://eslint.org/docs/rules/nonblock-statement-body-position)\r\n\r\n    ```javascript\r\n    // bad\r\n    if (test)\r\n      return false;\r\n\r\n    // good\r\n    if (test) return false;\r\n\r\n    // good\r\n    if (test) {\r\n      return false;\r\n    }\r\n\r\n    // bad\r\n    function foo() { return false; }\r\n\r\n    // good\r\n    function bar() {\r\n      return false;\r\n    }\r\n    ```",
    "[16.2](#blocks--cuddled-elses) If you’re using multiline blocks with `if` and `else`, put `else` on the same line as your `if` block’s closing brace. eslint: [`brace-style`](https://eslint.org/docs/rules/brace-style.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    if (test) {\r\n      thing1();\r\n      thing2();\r\n    }\r\n    else {\r\n      thing3();\r\n    }\r\n\r\n    // good\r\n    if (test) {\r\n      thing1();\r\n      thing2();\r\n    } else {\r\n      thing3();\r\n    }\r\n    ```",
    "[16.3](#blocks--no-else-return) If an `if` block always executes a `return` statement, the subsequent `else` block is unnecessary. A `return` in an `else if` block following an `if` block that contains a `return` can be separated into multiple `if` blocks. eslint: [`no-else-return`](https://eslint.org/docs/rules/no-else-return)\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {\r\n      if (x) {\r\n        return x;\r\n      } else {\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // bad\r\n    function cats() {\r\n      if (x) {\r\n        return x;\r\n      } else if (y) {\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // bad\r\n    function dogs() {\r\n      if (x) {\r\n        return x;\r\n      } else {\r\n        if (y) {\r\n          return y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // good\r\n    function foo() {\r\n      if (x) {\r\n        return x;\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    // good\r\n    function cats() {\r\n      if (x) {\r\n        return x;\r\n      }\r\n\r\n      if (y) {\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // good\r\n    function dogs(x) {\r\n      if (x) {\r\n        if (z) {\r\n          return y;\r\n        }\r\n      } else {\r\n        return z;\r\n      }\r\n    }\r\n    ```",
    "[17.1](#control-statements) In case your control statement (`if`, `while` etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line.\r\n\r\n    > Why? Requiring operators at the beginning of the line keeps the operators aligned and follows a pattern similar to method chaining. This also improves readability by making it easier to visually follow complex logic.\r\n\r\n    ```javascript\r\n    // bad\r\n    if ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\r\n      thing1();\r\n    }\r\n\r\n    // bad\r\n    if (foo === 123 &&\r\n      bar === 'abc') {\r\n      thing1();\r\n    }\r\n\r\n    // bad\r\n    if (foo === 123\r\n      && bar === 'abc') {\r\n      thing1();\r\n    }\r\n\r\n    // bad\r\n    if (\r\n      foo === 123 &&\r\n      bar === 'abc'\r\n    ) {\r\n      thing1();\r\n    }\r\n\r\n    // good\r\n    if (\r\n      foo === 123\r\n      && bar === 'abc'\r\n    ) {\r\n      thing1();\r\n    }\r\n\r\n    // good\r\n    if (\r\n      (foo === 123 || bar === 'abc')\r\n      && doesItLookGoodWhenItBecomesThatLong()\r\n      && isThisReallyHappening()\r\n    ) {\r\n      thing1();\r\n    }\r\n\r\n    // good\r\n    if (foo === 123 && bar === 'abc') {\r\n      thing1();\r\n    }\r\n    ```",
    "[17.2](#control-statements--value-selection) Don't use selection operators in place of control statements.\r\n\r\n    ```javascript\r\n    // bad\r\n    !isRunning && startRunning();\r\n\r\n    // good\r\n    if (!isRunning) {\r\n      startRunning();\r\n    }\r\n    ```",
    "[18.1](#comments--multiline) Use `/** ... */` for multiline comments.\r\n\r\n    ```javascript\r\n    // bad\r\n    // make() returns a new element\r\n    // based on the passed in tag name\r\n    //\r\n    // @param {String} tag\r\n    // @return {Element} element\r\n    function make(tag) {\r\n\r\n      // ...\r\n\r\n      return element;\r\n    }\r\n\r\n    // good\r\n    /**\r\n     * make() returns a new element\r\n     * based on the passed-in tag name\r\n     */\r\n    function make(tag) {\r\n\r\n      // ...\r\n\r\n      return element;\r\n    }\r\n    ```",
    "[18.2](#comments--singleline) Use `//` for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.\r\n\r\n    ```javascript\r\n    // bad\r\n    const active = true;  // is current tab\r\n\r\n    // good\r\n    // is current tab\r\n    const active = true;\r\n\r\n    // bad\r\n    function getType() {\r\n      console.log('fetching type...');\r\n      // set the default type to 'no type'\r\n      const type = this.type || 'no type';\r\n\r\n      return type;\r\n    }\r\n\r\n    // good\r\n    function getType() {\r\n      console.log('fetching type...');\r\n\r\n      // set the default type to 'no type'\r\n      const type = this.type || 'no type';\r\n\r\n      return type;\r\n    }\r\n\r\n    // also good\r\n    function getType() {\r\n      // set the default type to 'no type'\r\n      const type = this.type || 'no type';\r\n\r\n      return type;\r\n    }\r\n    ```",
    "[18.3](#comments--spaces) Start all comments with a space to make it easier to read. eslint: [`spaced-comment`](https://eslint.org/docs/rules/spaced-comment)\r\n\r\n    ```javascript\r\n    // bad\r\n    //is current tab\r\n    const active = true;\r\n\r\n    // good\r\n    // is current tab\r\n    const active = true;\r\n\r\n    // bad\r\n    /**\r\n     *make() returns a new element\r\n     *based on the passed-in tag name\r\n     */\r\n    function make(tag) {\r\n\r\n      // ...\r\n\r\n      return element;\r\n    }\r\n\r\n    // good\r\n    /**\r\n     * make() returns a new element\r\n     * based on the passed-in tag name\r\n     */\r\n    function make(tag) {\r\n\r\n      // ...\r\n\r\n      return element;\r\n    }\r\n    ```",
    "[18.4](#comments--actionitems) Prefixing your comments with `FIXME` or `TODO` helps other developers quickly understand if you’re pointing out a problem that needs to be revisited, or if you’re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are `FIXME: -- need to figure this out` or `TODO: -- need to implement`.",
    "[18.5](#comments--fixme) Use `// FIXME:` to annotate problems.\r\n\r\n    ```javascript\r\n    class Calculator extends Abacus {\r\n      constructor() {\r\n        super();\r\n\r\n        // FIXME: shouldn’t use a global here\r\n        total = 0;\r\n      }\r\n    }\r\n    ```",
    "[18.6](#comments--todo) Use `// TODO:` to annotate solutions to problems.\r\n\r\n    ```javascript\r\n    class Calculator extends Abacus {\r\n      constructor() {\r\n        super();\r\n\r\n        // TODO: total should be configurable by an options param\r\n        this.total = 0;\r\n      }\r\n    }\r\n    ```",
    "[19.1](#whitespace--spaces) Use soft tabs (space character) set to 2 spaces. eslint: [`indent`](https://eslint.org/docs/rules/indent.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {\r\n    ∙∙∙∙let name;\r\n    }\r\n\r\n    // bad\r\n    function bar() {\r\n    ∙let name;\r\n    }\r\n\r\n    // good\r\n    function baz() {\r\n    ∙∙let name;\r\n    }\r\n    ```",
    "[19.2](#whitespace--before-blocks) Place 1 space before the leading brace. eslint: [`space-before-blocks`](https://eslint.org/docs/rules/space-before-blocks.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function test(){\r\n      console.log('test');\r\n    }\r\n\r\n    // good\r\n    function test() {\r\n      console.log('test');\r\n    }\r\n\r\n    // bad\r\n    dog.set('attr',{\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog',\r\n    });\r\n\r\n    // good\r\n    dog.set('attr', {\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog',\r\n    });\r\n    ```",
    "[19.3](#whitespace--around-keywords) Place 1 space before the opening parenthesis in control statements (`if`, `while` etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: [`keyword-spacing`](https://eslint.org/docs/rules/keyword-spacing.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    if(isJedi) {\r\n      fight ();\r\n    }\r\n\r\n    // good\r\n    if (isJedi) {\r\n      fight();\r\n    }\r\n\r\n    // bad\r\n    function fight () {\r\n      console.log ('Swooosh!');\r\n    }\r\n\r\n    // good\r\n    function fight() {\r\n      console.log('Swooosh!');\r\n    }\r\n    ```",
    "[19.4](#whitespace--infix-ops) Set off operators with spaces. eslint: [`space-infix-ops`](https://eslint.org/docs/rules/space-infix-ops.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const x=y+5;\r\n\r\n    // good\r\n    const x = y + 5;\r\n    ```",
    "[19.5](#whitespace--newline-at-end) End files with a single newline character. eslint: [`eol-last`](https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md)\r\n\r\n    ```javascript\r\n    // bad\r\n    import { es6 } from './AirbnbStyleGuide';\r\n      // ...\r\n    export default es6;\r\n    ```\r\n\r\n    ```javascript\r\n    // bad\r\n    import { es6 } from './AirbnbStyleGuide';\r\n      // ...\r\n    export default es6;↵\r\n    ↵\r\n    ```\r\n\r\n    ```javascript\r\n    // good\r\n    import { es6 } from './AirbnbStyleGuide';\r\n      // ...\r\n    export default es6;↵\r\n    ```",
    "[19.6](#whitespace--chains) Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\r\n    emphasizes that the line is a method call, not a new statement. eslint: [`newline-per-chained-call`](https://eslint.org/docs/rules/newline-per-chained-call) [`no-whitespace-before-property`](https://eslint.org/docs/rules/no-whitespace-before-property)\r\n\r\n    ```javascript\r\n    // bad\r\n    $('#items').find('.selected').highlight().end().find('.open').updateCount();\r\n\r\n    // bad\r\n    $('#items').\r\n      find('.selected').\r\n        highlight().\r\n        end().\r\n      find('.open').\r\n        updateCount();\r\n\r\n    // good\r\n    $('#items')\r\n      .find('.selected')\r\n        .highlight()\r\n        .end()\r\n      .find('.open')\r\n        .updateCount();\r\n\r\n    // bad\r\n    const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\r\n        .attr('width', (radius + margin) * 2).append('svg:g')\r\n        .attr('transform', `translate(${radius + margin},${radius + margin})`)\r\n        .call(tron.led);\r\n\r\n    // good\r\n    const leds = stage.selectAll('.led')\r\n        .data(data)\r\n      .enter().append('svg:svg')\r\n        .classed('led', true)\r\n        .attr('width', (radius + margin) * 2)\r\n      .append('svg:g')\r\n        .attr('transform', `translate(${radius + margin},${radius + margin})`)\r\n        .call(tron.led);\r\n\r\n    // good\r\n    const leds = stage.selectAll('.led').data(data);\r\n    const svg = leds.enter().append('svg:svg');\r\n    svg.classed('led', true).attr('width', (radius + margin) * 2);\r\n    const g = svg.append('svg:g');\r\n    g.attr('transform', `translate(${radius + margin},${radius + margin})`).call(tron.led);\r\n    ```",
    "[19.7](#whitespace--after-blocks) Leave a blank line after blocks and before the next statement.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (foo) {\r\n      return bar;\r\n    }\r\n    return baz;\r\n\r\n    // good\r\n    if (foo) {\r\n      return bar;\r\n    }\r\n\r\n    return baz;\r\n\r\n    // bad\r\n    const obj = {\r\n      foo() {\r\n      },\r\n      bar() {\r\n      },\r\n    };\r\n    return obj;\r\n\r\n    // good\r\n    const obj = {\r\n      foo() {\r\n      },\r\n\r\n      bar() {\r\n      },\r\n    };\r\n\r\n    return obj;\r\n\r\n    // bad\r\n    const arr = [\r\n      function foo() {\r\n      },\r\n      function bar() {\r\n      },\r\n    ];\r\n    return arr;\r\n\r\n    // good\r\n    const arr = [\r\n      function foo() {\r\n      },\r\n\r\n      function bar() {\r\n      },\r\n    ];\r\n\r\n    return arr;\r\n    ```",
    "[19.8](#whitespace--padded-blocks) Do not pad your blocks with blank lines. eslint: [`padded-blocks`](https://eslint.org/docs/rules/padded-blocks.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function bar() {\r\n\r\n      console.log(foo);\r\n\r\n    }\r\n\r\n    // bad\r\n    if (baz) {\r\n\r\n      console.log(qux);\r\n    } else {\r\n      console.log(foo);\r\n\r\n    }\r\n\r\n    // bad\r\n    class Foo {\r\n\r\n      constructor(bar) {\r\n        this.bar = bar;\r\n      }\r\n    }\r\n\r\n    // good\r\n    function bar() {\r\n      console.log(foo);\r\n    }\r\n\r\n    // good\r\n    if (baz) {\r\n      console.log(qux);\r\n    } else {\r\n      console.log(foo);\r\n    }\r\n    ```",
    "[19.9](#whitespace--no-multiple-blanks) Do not use multiple blank lines to pad your code. eslint: [`no-multiple-empty-lines`](https://eslint.org/docs/rules/no-multiple-empty-lines)\r\n\r\n    <!-- markdownlint-disable MD012 -->\r\n    ```javascript\r\n    // bad\r\n    class Person {\r\n      constructor(fullName, email, birthday) {\r\n        this.fullName = fullName;\r\n\r\n\r\n        this.email = email;\r\n\r\n\r\n        this.setAge(birthday);\r\n      }\r\n\r\n\r\n      setAge(birthday) {\r\n        const today = new Date();\r\n\r\n\r\n        const age = this.getAge(today, birthday);\r\n\r\n\r\n        this.age = age;\r\n      }\r\n\r\n\r\n      getAge(today, birthday) {\r\n        // ..\r\n      }\r\n    }\r\n\r\n    // good\r\n    class Person {\r\n      constructor(fullName, email, birthday) {\r\n        this.fullName = fullName;\r\n        this.email = email;\r\n        this.setAge(birthday);\r\n      }\r\n\r\n      setAge(birthday) {\r\n        const today = new Date();\r\n        const age = getAge(today, birthday);\r\n        this.age = age;\r\n      }\r\n\r\n      getAge(today, birthday) {\r\n        // ..\r\n      }\r\n    }\r\n    ```",
    "[19.10](#whitespace--in-parens) Do not add spaces inside parentheses. eslint: [`space-in-parens`](https://eslint.org/docs/rules/space-in-parens.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function bar( foo ) {\r\n      return foo;\r\n    }\r\n\r\n    // good\r\n    function bar(foo) {\r\n      return foo;\r\n    }\r\n\r\n    // bad\r\n    if ( foo ) {\r\n      console.log(foo);\r\n    }\r\n\r\n    // good\r\n    if (foo) {\r\n      console.log(foo);\r\n    }\r\n    ```",
    "[19.11](#whitespace--in-brackets) Do not add spaces inside brackets. eslint: [`array-bracket-spacing`](https://eslint.org/docs/rules/array-bracket-spacing.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = [ 1, 2, 3 ];\r\n    console.log(foo[ 0 ]);\r\n\r\n    // good\r\n    const foo = [1, 2, 3];\r\n    console.log(foo[0]);\r\n    ```",
    "[19.12](#whitespace--in-braces) Add spaces inside curly braces. eslint: [`object-curly-spacing`](https://eslint.org/docs/rules/object-curly-spacing.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = {clark: 'kent'};\r\n\r\n    // good\r\n    const foo = { clark: 'kent' };\r\n    ```",
    "[19.13](#whitespace--max-len) Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per [above](#strings--line-length), long strings are exempt from this rule, and should not be broken up. eslint: [`max-len`](https://eslint.org/docs/rules/max-len.html)\r\n\r\n    > Why? This ensures readability and maintainability.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;\r\n\r\n    // bad\r\n    $.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));\r\n\r\n    // good\r\n    const foo = jsonData\r\n      && jsonData.foo\r\n      && jsonData.foo.bar\r\n      && jsonData.foo.bar.baz\r\n      && jsonData.foo.bar.baz.quux\r\n      && jsonData.foo.bar.baz.quux.xyzzy;\r\n\r\n    // good\r\n    $.ajax({\r\n      method: 'POST',\r\n      url: 'https://airbnb.com/',\r\n      data: { name: 'John' },\r\n    })\r\n      .done(() => console.log('Congratulations!'))\r\n      .fail(() => console.log('You have failed this city.'));\r\n    ```",
    "[19.14](#whitespace--block-spacing) Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: [`block-spacing`](https://eslint.org/docs/rules/block-spacing)\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {return true;}\r\n    if (foo) { bar = 0;}\r\n\r\n    // good\r\n    function foo() { return true; }\r\n    if (foo) { bar = 0; }\r\n    ```",
    "[19.15](#whitespace--comma-spacing) Avoid spaces before commas and require a space after commas. eslint: [`comma-spacing`](https://eslint.org/docs/rules/comma-spacing)\r\n\r\n    ```javascript\r\n    // bad\r\n    var foo = 1,bar = 2;\r\n    var arr = [1 , 2];\r\n\r\n    // good\r\n    var foo = 1, bar = 2;\r\n    var arr = [1, 2];\r\n    ```",
    "[19.16](#whitespace--computed-property-spacing) Enforce spacing inside of computed property brackets. eslint: [`computed-property-spacing`](https://eslint.org/docs/rules/computed-property-spacing)\r\n\r\n    ```javascript\r\n    // bad\r\n    obj[foo ]\r\n    obj[ 'foo']\r\n    var x = {[ b ]: a}\r\n    obj[foo[ bar ]]\r\n\r\n    // good\r\n    obj[foo]\r\n    obj['foo']\r\n    var x = { [b]: a }\r\n    obj[foo[bar]]\r\n    ```",
    "[19.17](#whitespace--func-call-spacing) Avoid spaces between functions and their invocations. eslint: [`func-call-spacing`](https://eslint.org/docs/rules/func-call-spacing)\r\n\r\n    ```javascript\r\n    // bad\r\n    func ();\r\n\r\n    func\r\n    ();\r\n\r\n    // good\r\n    func();\r\n    ```",
    "[19.18](#whitespace--key-spacing) Enforce spacing between keys and values in object literal properties. eslint: [`key-spacing`](https://eslint.org/docs/rules/key-spacing)\r\n\r\n    ```javascript\r\n    // bad\r\n    var obj = { foo : 42 };\r\n    var obj2 = { foo:42 };\r\n\r\n    // good\r\n    var obj = { foo: 42 };\r\n    ```",
    "[19.19](#whitespace--no-trailing-spaces) Avoid trailing spaces at the end of lines. eslint: [`no-trailing-spaces`](https://eslint.org/docs/rules/no-trailing-spaces)",
    "[19.20](#whitespace--no-multiple-empty-lines) Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: [`no-multiple-empty-lines`](https://eslint.org/docs/rules/no-multiple-empty-lines)\r\n\r\n    <!-- markdownlint-disable MD012 -->\r\n    ```javascript\r\n    // bad - multiple empty lines\r\n    var x = 1;\r\n\r\n\r\n    var y = 2;\r\n\r\n    // bad - 2+ newlines at end of file\r\n    var x = 1;\r\n    var y = 2;\r\n\r\n\r\n    // bad - 1+ newline(s) at beginning of file\r\n\r\n    var x = 1;\r\n    var y = 2;\r\n\r\n    // good\r\n    var x = 1;\r\n    var y = 2;\r\n\r\n    ```\r\n    <!-- markdownlint-enable MD012 -->",
    "[20.1](#commas--leading-trailing) Leading commas: **Nope.** eslint: [`comma-style`](https://eslint.org/docs/rules/comma-style.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const story = [\r\n        once\r\n      , upon\r\n      , aTime\r\n    ];\r\n\r\n    // good\r\n    const story = [\r\n      once,\r\n      upon,\r\n      aTime,\r\n    ];\r\n\r\n    // bad\r\n    const hero = {\r\n        firstName: 'Ada'\r\n      , lastName: 'Lovelace'\r\n      , birthYear: 1815\r\n      , superPower: 'computers'\r\n    };\r\n\r\n    // good\r\n    const hero = {\r\n      firstName: 'Ada',\r\n      lastName: 'Lovelace',\r\n      birthYear: 1815,\r\n      superPower: 'computers',\r\n    };\r\n    ```",
    "[20.2](#commas--dangling) Additional trailing comma: **Yup.** eslint: [`comma-dangle`](https://eslint.org/docs/rules/comma-dangle.html)\r\n\r\n    > Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the [trailing comma problem](https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas) in legacy browsers.\r\n\r\n    ```diff\r\n    // bad - git diff without trailing comma\r\n    const hero = {\r\n         firstName: 'Florence',\r\n    -    lastName: 'Nightingale'\r\n    +    lastName: 'Nightingale',\r\n    +    inventorOf: ['coxcomb chart', 'modern nursing']\r\n    };\r\n\r\n    // good - git diff with trailing comma\r\n    const hero = {\r\n         firstName: 'Florence',\r\n         lastName: 'Nightingale',\r\n    +    inventorOf: ['coxcomb chart', 'modern nursing'],\r\n    };\r\n    ```\r\n\r\n    ```javascript\r\n    // bad\r\n    const hero = {\r\n      firstName: 'Dana',\r\n      lastName: 'Scully'\r\n    };\r\n\r\n    const heroes = [\r\n      'Batman',\r\n      'Superman'\r\n    ];\r\n\r\n    // good\r\n    const hero = {\r\n      firstName: 'Dana',\r\n      lastName: 'Scully',\r\n    };\r\n\r\n    const heroes = [\r\n      'Batman',\r\n      'Superman',\r\n    ];\r\n\r\n    // bad\r\n    function createHero(\r\n      firstName,\r\n      lastName,\r\n      inventorOf\r\n    ) {\r\n      // does nothing\r\n    }\r\n\r\n    // good\r\n    function createHero(\r\n      firstName,\r\n      lastName,\r\n      inventorOf,\r\n    ) {\r\n      // does nothing\r\n    }\r\n\r\n    // good (note that a comma must not appear after a \"rest\" element)\r\n    function createHero(\r\n      firstName,\r\n      lastName,\r\n      inventorOf,\r\n      ...heroArgs\r\n    ) {\r\n      // does nothing\r\n    }\r\n\r\n    // bad\r\n    createHero(\r\n      firstName,\r\n      lastName,\r\n      inventorOf\r\n    );\r\n\r\n    // good\r\n    createHero(\r\n      firstName,\r\n      lastName,\r\n      inventorOf,\r\n    );\r\n\r\n    // good (note that a comma must not appear after a \"rest\" element)\r\n    createHero(\r\n      firstName,\r\n      lastName,\r\n      inventorOf,\r\n      ...heroArgs\r\n    );\r\n    ```",
    "[21.1](#semicolons--required) **Yup.** eslint: [`semi`](https://eslint.org/docs/rules/semi.html)\r\n\r\n    > Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called [Automatic Semicolon Insertion](https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion) to determine whether it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.\r\n\r\n    ```javascript\r\n    // bad - raises exception\r\n    const luke = {}\r\n    const leia = {}\r\n    [luke, leia].forEach((jedi) => jedi.father = 'vader')\r\n\r\n    // bad - raises exception\r\n    const reaction = \"No! That’s impossible!\"\r\n    (async function meanwhileOnTheFalcon() {\r\n      // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`\r\n      // ...\r\n    }())\r\n\r\n    // bad - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!\r\n    function foo() {\r\n      return\r\n        'search your feelings, you know it to be foo'\r\n    }\r\n\r\n    // good\r\n    const luke = {};\r\n    const leia = {};\r\n    [luke, leia].forEach((jedi) => {\r\n      jedi.father = 'vader';\r\n    });\r\n\r\n    // good\r\n    const reaction = \"No! That’s impossible!\";\r\n    (async function meanwhileOnTheFalcon() {\r\n      // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`\r\n      // ...\r\n    }());\r\n\r\n    // good\r\n    function foo() {\r\n      return 'search your feelings, you know it to be foo';\r\n    }\r\n    ```\r\n\r\n    [Read more](https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214#7365214).",
    "[22.1](#coercion--explicit) Perform type coercion at the beginning of the statement.",
    "[22.2](#coercion--strings) Strings: eslint: [`no-new-wrappers`](https://eslint.org/docs/rules/no-new-wrappers)\r\n\r\n    ```javascript\r\n    // => this.reviewScore = 9;\r\n\r\n    // bad\r\n    const totalScore = new String(this.reviewScore); // typeof totalScore is \"object\" not \"string\"\r\n\r\n    // bad\r\n    const totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf()\r\n\r\n    // bad\r\n    const totalScore = this.reviewScore.toString(); // isn’t guaranteed to return a string\r\n\r\n    // good\r\n    const totalScore = String(this.reviewScore);\r\n    ```",
    "[22.3](#coercion--numbers) Numbers: Use `Number` for type casting and `parseInt` always with a radix for parsing strings. eslint: [`radix`](https://eslint.org/docs/rules/radix) [`no-new-wrappers`](https://eslint.org/docs/rules/no-new-wrappers)\r\n\r\n    > Why? The `parseInt` function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading whitespace in string is ignored. If radix is `undefined` or `0`, it is assumed to be `10` except when the number begins with the character pairs `0x` or `0X`, in which case a radix of 16 is assumed. This differs from ECMAScript 3, which merely discouraged (but allowed) octal interpretation. Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, always specify a radix.\r\n\r\n    ```javascript\r\n    const inputValue = '4';\r\n\r\n    // bad\r\n    const val = new Number(inputValue);\r\n\r\n    // bad\r\n    const val = +inputValue;\r\n\r\n    // bad\r\n    const val = inputValue >> 0;\r\n\r\n    // bad\r\n    const val = parseInt(inputValue);\r\n\r\n    // good\r\n    const val = Number(inputValue);\r\n\r\n    // good\r\n    const val = parseInt(inputValue, 10);\r\n    ```",
    "[22.4](#coercion--comment-deviations) If for whatever reason you are doing something wild and `parseInt` is your bottleneck and need to use Bitshift for [performance reasons](https://jsperf.com/coercion-vs-casting/3), leave a comment explaining why and what you’re doing.\r\n\r\n    ```javascript\r\n    // good\r\n    /**\r\n     * parseInt was the reason my code was slow.\r\n     * Bitshifting the String to coerce it to a\r\n     * Number made it a lot faster.\r\n     */\r\n    const val = inputValue >> 0;\r\n    ```",
    "[22.5](#coercion--bitwise) **Note:** Be careful when using bitshift operations. Numbers are represented as [64-bit values](https://es5.github.io/#x4.3.19), but bitshift operations always return a 32-bit integer ([source](https://es5.github.io/#x11.7)). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. [Discussion](https://github.com/airbnb/javascript/issues/109). Largest signed 32-bit Int is 2,147,483,647:\r\n\r\n    ```javascript\r\n    2147483647 >> 0; // => 2147483647\r\n    2147483648 >> 0; // => -2147483648\r\n    2147483649 >> 0; // => -2147483647\r\n    ```",
    "[22.6](#coercion--booleans) Booleans: eslint: [`no-new-wrappers`](https://eslint.org/docs/rules/no-new-wrappers)\r\n\r\n    ```javascript\r\n    const age = 0;\r\n\r\n    // bad\r\n    const hasAge = new Boolean(age);\r\n\r\n    // good\r\n    const hasAge = Boolean(age);\r\n\r\n    // best\r\n    const hasAge = !!age;\r\n    ```",
    "[23.1](#naming--descriptive) Avoid single letter names. Be descriptive with your naming. eslint: [`id-length`](https://eslint.org/docs/rules/id-length)\r\n\r\n    ```javascript\r\n    // bad\r\n    function q() {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function query() {\r\n      // ...\r\n    }\r\n    ```",
    "[23.2](#naming--camelCase) Use camelCase when naming objects, functions, and instances. eslint: [`camelcase`](https://eslint.org/docs/rules/camelcase.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const OBJEcttsssss = {};\r\n    const this_is_my_object = {};\r\n    function c() {}\r\n\r\n    // good\r\n    const thisIsMyObject = {};\r\n    function thisIsMyFunction() {}\r\n    ```",
    "[23.3](#naming--PascalCase) Use PascalCase only when naming constructors or classes. eslint: [`new-cap`](https://eslint.org/docs/rules/new-cap.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function user(options) {\r\n      this.name = options.name;\r\n    }\r\n\r\n    const bad = new user({\r\n      name: 'nope',\r\n    });\r\n\r\n    // good\r\n    class User {\r\n      constructor(options) {\r\n        this.name = options.name;\r\n      }\r\n    }\r\n\r\n    const good = new User({\r\n      name: 'yup',\r\n    });\r\n    ```",
    "[23.4](#naming--leading-underscore) Do not use trailing or leading underscores. eslint: [`no-underscore-dangle`](https://eslint.org/docs/rules/no-underscore-dangle.html)\r\n\r\n    > Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.\r\n\r\n    ```javascript\r\n    // bad\r\n    this.__firstName__ = 'Panda';\r\n    this.firstName_ = 'Panda';\r\n    this._firstName = 'Panda';\r\n\r\n    // good\r\n    this.firstName = 'Panda';\r\n\r\n    // good, in environments where WeakMaps are available\r\n    // see https://kangax.github.io/compat-table/es6/#test-WeakMap\r\n    const firstNames = new WeakMap();\r\n    firstNames.set(this, 'Panda');\r\n    ```",
    "[23.5](#naming--self-this) Don’t save references to `this`. Use arrow functions or [Function#bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {\r\n      const self = this;\r\n      return function () {\r\n        console.log(self);\r\n      };\r\n    }\r\n\r\n    // bad\r\n    function foo() {\r\n      const that = this;\r\n      return function () {\r\n        console.log(that);\r\n      };\r\n    }\r\n\r\n    // good\r\n    function foo() {\r\n      return () => {\r\n        console.log(this);\r\n      };\r\n    }\r\n    ```",
    "[23.6](#naming--filename-matches-export) A base filename should exactly match the name of its default export.\r\n\r\n    ```javascript\r\n    // file 1 contents\r\n    class CheckBox {\r\n      // ...\r\n    }\r\n    export default CheckBox;\r\n\r\n    // file 2 contents\r\n    export default function fortyTwo() { return 42; }\r\n\r\n    // file 3 contents\r\n    export default function insideDirectory() {}\r\n\r\n    // in some other file\r\n    // bad\r\n    import CheckBox from './checkBox'; // PascalCase import/export, camelCase filename\r\n    import FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export\r\n    import InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export\r\n\r\n    // bad\r\n    import CheckBox from './check_box'; // PascalCase import/export, snake_case filename\r\n    import forty_two from './forty_two'; // snake_case import/filename, camelCase export\r\n    import inside_directory from './inside_directory'; // snake_case import, camelCase export\r\n    import index from './inside_directory/index'; // requiring the index file explicitly\r\n    import insideDirectory from './insideDirectory/index'; // requiring the index file explicitly\r\n\r\n    // good\r\n    import CheckBox from './CheckBox'; // PascalCase export/import/filename\r\n    import fortyTwo from './fortyTwo'; // camelCase export/import/filename\r\n    import insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \"index\"\r\n    // ^ supports both insideDirectory.js and insideDirectory/index.js\r\n    ```",
    "[23.7](#naming--camelCase-default-export) Use camelCase when you export-default a function. Your filename should be identical to your function’s name.\r\n\r\n    ```javascript\r\n    function makeStyleGuide() {\r\n      // ...\r\n    }\r\n\r\n    export default makeStyleGuide;\r\n    ```",
    "[23.8](#naming--PascalCase-singleton) Use PascalCase when you export a constructor / class / singleton / function library / bare object.\r\n\r\n    ```javascript\r\n    const AirbnbStyleGuide = {\r\n      es6: {\r\n      },\r\n    };\r\n\r\n    export default AirbnbStyleGuide;\r\n    ```",
    "[23.9](#naming--Acronyms-and-Initialisms) Acronyms and initialisms should always be all uppercased, or all lowercased.\r\n\r\n    > Why? Names are for readability, not to appease a computer algorithm.\r\n\r\n    ```javascript\r\n    // bad\r\n    import SmsContainer from './containers/SmsContainer';\r\n\r\n    // bad\r\n    const HttpRequests = [\r\n      // ...\r\n    ];\r\n\r\n    // good\r\n    import SMSContainer from './containers/SMSContainer';\r\n\r\n    // good\r\n    const HTTPRequests = [\r\n      // ...\r\n    ];\r\n\r\n    // also good\r\n    const httpRequests = [\r\n      // ...\r\n    ];\r\n\r\n    // best\r\n    import TextMessageContainer from './containers/TextMessageContainer';\r\n\r\n    // best\r\n    const requests = [\r\n      // ...\r\n    ];\r\n    ```",
    "[23.10](#naming--uppercase) You may optionally uppercase a constant only if it (1) is exported, (2) is a `const` (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.\r\n\r\n    > Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.\r\n    - What about all `const` variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.\r\n    - What about exported objects? - Uppercase at the top level of export (e.g. `EXPORTED_OBJECT.key`) and maintain that all nested properties do not change.\r\n\r\n    ```javascript\r\n    // bad\r\n    const PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';\r\n\r\n    // bad\r\n    export const THING_TO_BE_CHANGED = 'should obviously not be uppercased';\r\n\r\n    // bad\r\n    export let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';\r\n\r\n    // ---\r\n\r\n    // allowed but does not supply semantic value\r\n    export const apiKey = 'SOMEKEY';\r\n\r\n    // better in most cases\r\n    export const API_KEY = 'SOMEKEY';\r\n\r\n    // ---\r\n\r\n    // bad - unnecessarily uppercases key while adding no semantic value\r\n    export const MAPPING = {\r\n      KEY: 'value'\r\n    };\r\n\r\n    // good\r\n    export const MAPPING = {\r\n      key: 'value'\r\n    };\r\n    ```",
    "[24.1](#accessors--not-required) Accessor functions for properties are not required.",
    "[24.2](#accessors--no-getters-setters) Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use `getVal()` and `setVal('hello')`.\r\n\r\n    ```javascript\r\n    // bad\r\n    class Dragon {\r\n      get age() {\r\n        // ...\r\n      }\r\n\r\n      set age(value) {\r\n        // ...\r\n      }\r\n    }\r\n\r\n    // good\r\n    class Dragon {\r\n      getAge() {\r\n        // ...\r\n      }\r\n\r\n      setAge(value) {\r\n        // ...\r\n      }\r\n    }\r\n    ```",
    "[24.3](#accessors--boolean-prefix) If the property/method is a `boolean`, use `isVal()` or `hasVal()`.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (!dragon.age()) {\r\n      return false;\r\n    }\r\n\r\n    // good\r\n    if (!dragon.hasAge()) {\r\n      return false;\r\n    }\r\n    ```",
    "[24.4](#accessors--consistent) It’s okay to create `get()` and `set()` functions, but be consistent.\r\n\r\n    ```javascript\r\n    class Jedi {\r\n      constructor(options = {}) {\r\n        const lightsaber = options.lightsaber || 'blue';\r\n        this.set('lightsaber', lightsaber);\r\n      }\r\n\r\n      set(key, val) {\r\n        this[key] = val;\r\n      }\r\n\r\n      get(key) {\r\n        return this[key];\r\n      }\r\n    }\r\n    ```",
    "[25.1](#events--hash) When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a \"hash\") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:\r\n\r\n    ```javascript\r\n    // bad\r\n    $(this).trigger('listingUpdated', listing.id);\r\n\r\n    // ...\r\n\r\n    $(this).on('listingUpdated', (e, listingID) => {\r\n      // do something with listingID\r\n    });\r\n    ```\r\n\r\n    prefer:\r\n\r\n    ```javascript\r\n    // good\r\n    $(this).trigger('listingUpdated', { listingID: listing.id });\r\n\r\n    // ...\r\n\r\n    $(this).on('listingUpdated', (e, data) => {\r\n      // do something with data.listingID\r\n    });\r\n    ```",
    "[26.1](#jquery--dollar-prefix) Prefix jQuery object variables with a `$`.\r\n\r\n    ```javascript\r\n    // bad\r\n    const sidebar = $('.sidebar');\r\n\r\n    // good\r\n    const $sidebar = $('.sidebar');\r\n\r\n    // good\r\n    const $sidebarBtn = $('.sidebar-btn');\r\n    ```",
    "[26.2](#jquery--cache) Cache jQuery lookups.\r\n\r\n    ```javascript\r\n    // bad\r\n    function setSidebar() {\r\n      $('.sidebar').hide();\r\n\r\n      // ...\r\n\r\n      $('.sidebar').css({\r\n        'background-color': 'pink',\r\n      });\r\n    }\r\n\r\n    // good\r\n    function setSidebar() {\r\n      const $sidebar = $('.sidebar');\r\n      $sidebar.hide();\r\n\r\n      // ...\r\n\r\n      $sidebar.css({\r\n        'background-color': 'pink',\r\n      });\r\n    }\r\n    ```",
    "[26.3](#jquery--queries) For DOM queries use Cascading `$('.sidebar ul')` or parent > child `$('.sidebar > ul')`. [jsPerf](https://jsperf.com/jquery-find-vs-context-sel/16)",
    "[26.4](#jquery--find) Use `find` with scoped jQuery object queries.\r\n\r\n    ```javascript\r\n    // bad\r\n    $('ul', '.sidebar').hide();\r\n\r\n    // bad\r\n    $('.sidebar').find('ul').hide();\r\n\r\n    // good\r\n    $('.sidebar ul').hide();\r\n\r\n    // good\r\n    $('.sidebar > ul').hide();\r\n\r\n    // good\r\n    $sidebar.find('ul').hide();\r\n    ```",
    "[27.1](#es5-compat--kangax) Refer to [Kangax](https://twitter.com/kangax/)’s ES5 [compatibility table](https://kangax.github.io/es5-compat-table/).",
    "[28.1](#es6-styles) This is a collection of links to the various ES6+ features.\r\n\r\n1. [Arrow Functions](#arrow-functions)\r\n1. [Classes](#classes--constructors)\r\n1. [Object Shorthand](#es6-object-shorthand)\r\n1. [Object Concise](#es6-object-concise)\r\n1. [Object Computed Properties](#es6-computed-properties)\r\n1. [Template Strings](#es6-template-literals)\r\n1. [Destructuring](#destructuring)\r\n1. [Default Parameters](#es6-default-parameters)\r\n1. [Rest](#es6-rest)\r\n1. [Array Spreads](#es6-array-spreads)\r\n1. [Let and Const](#references)\r\n1. [Exponentiation Operator](#es2016-properties--exponentiation-operator)\r\n1. [Iterators and Generators](#iterators-and-generators)\r\n1. [Modules](#modules)",
    "[28.2](#tc39-proposals) Do not use [TC39 proposals](https://github.com/tc39/proposals) that have not reached stage 3.\r\n\r\n    > Why? [They are not finalized](https://tc39.github.io/process-document/), and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.\r\n\r\n\r\n\r\n\r\n\r\n  The [Standard Library](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects)\r\n  contains utilities that are functionally broken but remain for legacy reasons.",
    "[29.1](#standard-library--isnan) Use `Number.isNaN` instead of global `isNaN`.\r\n    eslint: [`no-restricted-globals`](https://eslint.org/docs/rules/no-restricted-globals)\r\n\r\n    > Why? The global `isNaN` coerces non-numbers to numbers, returning true for anything that coerces to NaN.\r\n    > If this behavior is desired, make it explicit.\r\n\r\n    ```javascript\r\n    // bad\r\n    isNaN('1.2'); // false\r\n    isNaN('1.2.3'); // true\r\n\r\n    // good\r\n    Number.isNaN('1.2.3'); // false\r\n    Number.isNaN(Number('1.2.3')); // true\r\n    ```",
    "[29.2](#standard-library--isfinite) Use `Number.isFinite` instead of global `isFinite`.\r\n    eslint: [`no-restricted-globals`](https://eslint.org/docs/rules/no-restricted-globals)\r\n\r\n    > Why? The global `isFinite` coerces non-numbers to numbers, returning true for anything that coerces to a finite number.\r\n    > If this behavior is desired, make it explicit.\r\n\r\n    ```javascript\r\n    // bad\r\n    isFinite('2e3'); // true\r\n\r\n    // good\r\n    Number.isFinite('2e3'); // false\r\n    Number.isFinite(parseInt('2e3', 10)); // true\r\n    ```",
    "[30.1](#testing--yup) **Yup.**\r\n\r\n    ```javascript\r\n    function foo() {\r\n      return true;\r\n    }\r\n    ```",
    "[30.2](#testing--for-real) **No, but seriously**:\r\n    - Whichever testing framework you use, you should be writing tests!\r\n    - Strive to write many small pure functions, and minimize where mutations occur.\r\n    - Be cautious about stubs and mocks - they can make your tests more brittle.\r\n    - We primarily use [`mocha`](https://www.npmjs.com/package/mocha) and [`jest`](https://www.npmjs.com/package/jest) at Airbnb. [`tape`](https://www.npmjs.com/package/tape) is also used occasionally for small, separate modules.\r\n    - 100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.\r\n    - Whenever you fix a bug, _write a regression test_. A bug fixed without a regression test is almost certainly going to break again in the future.",
    "[On Layout & Web Performance](https://www.kellegous.com/j/2013/01/26/layout-performance/)",
    "[String vs Array Concat](https://jsperf.com/string-vs-array-concat/2)",
    "[Try/Catch Cost In a Loop](https://jsperf.com/try-catch-in-loop-cost/12)",
    "[Bang Function](https://jsperf.com/bang-function)",
    "[jQuery Find vs Context, Selector](https://jsperf.com/jquery-find-vs-context-sel/164)",
    "[innerHTML vs textContent for script text](https://jsperf.com/innerhtml-vs-textcontent-for-script-text)",
    "[Long String Concatenation](https://jsperf.com/ya-string-concat/38)",
    "[Are JavaScript functions like `map()`, `reduce()`, and `filter()` optimized for traversing arrays?](https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta)",
    "Loading..."
]